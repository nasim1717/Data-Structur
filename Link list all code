//// Lab task 8

#include<bits/stdc++.h>
#include<stdlib.h>
#include<string.h>
using namespace std;

struct node{
    char num[100];
    node *next;
}*stnode=NULL;

void createnode(int n){
    node *tmp,*newn;

    for(int i=0; i<n; i++){
        newn = (node *)malloc(sizeof(node));

        printf("\nEnter data: ");
        cin>>newn->num;
        newn->next=NULL;

        if(stnode==NULL){
            stnode=newn;
            tmp=stnode;
        }
        else{
            tmp->next=newn;
            tmp=tmp->next;
        }
    }
}

void insert_beg(node *x){
    node *tmp, *nwn;

    nwn=(node *)malloc(sizeof(node));
    nwn=x;
    if(stnode==NULL)
    {
        nwn->next=stnode;
        stnode=nwn;
        printf("\nNode inserted succesfully at the beginning\n");

    }
    else{
        tmp=stnode;
        stnode=nwn;
        nwn->next=tmp; //making new new node point at the first node of the list
        printf("\nNode inserted succesfully at the beginning\n");
    }
}

void insert_end(node *y){

    node *tmp, *nwn;
    nwn=(node *)malloc(sizeof(node));
    nwn=y;
    if(stnode==NULL){
        nwn->next=NULL;
        stnode=nwn;
        printf("\nNode inserted succesfully at the end..\n");

    }
    else{
        tmp=stnode;
        while(tmp->next!=NULL){
            tmp=tmp->next;
        }
        tmp->next=nwn;
        nwn->next=NULL;
        printf("\nNOde end inserted succesfully\n");
    }
}

void position(int pos, node *posi){
    node *tmp,*nwn;
    nwn=(node *)malloc(sizeof(node));

    nwn=posi;
    tmp=stnode;
    for(int i=1; i<pos-1; i++){
        tmp=tmp->next;
        if(tmp==NULL)
          cout<<"Less than "<<pos<<"nodes in the list...!!!";
    }
    nwn->next=tmp->next;
    tmp->next=nwn;
   cout<<"\nNode inserted successfully\n";
}

void first_delet(){
    node *tmp;
    if(stnode==NULL)
        cout<<"\nError......List is empty\n";
    else{
        tmp=stnode;
        stnode=tmp->next;
        delete tmp;
        cout<<"\nDeleted sucssesfuly\n";
    }

}

void last_delet(){
    node *tmp,*p;
    if(stnode==NULL)
     cout<<"\nError....List is empty";
    else{
        tmp=stnode;
        while(tmp->next->next!=NULL){
            tmp=tmp->next;
        }
            p=tmp->next;
            tmp->next=NULL;
            delete p;
            cout<<"Deleted sucsesfully"<<endl;
    }
}
delete_posi(int posi2){
    node *tmp,*p;
    int i;
    tmp=stnode;
    for(i=2; i<posi2; i++){
        tmp=tmp->next;
        if(tmp==NULL)
            printf("\nNode not found\n");
    }
    if(i==posi2){
        p=tmp->next;
        tmp->next=p->next;
        delete p;
        printf("\nDelete sucssesfuly\n");
    }
}

void serach(string src){
    int x=0;
    node *tmp;
    tmp=stnode;
    while(tmp!=NULL){
        if(tmp->num==src){
            cout<<"\nFOund: "<<tmp->num<<endl;
            x=1;
            break;
        }
        tmp=tmp->next;
    }
    if(x==0)
        cout<<"\nItem is not Found"<<endl;
}

void display(){
    node *tmp;
    if(stnode==NULL)
        printf("\nList is empty.");
    else{
        tmp=stnode;
        while(tmp!=NULL){
            printf("\nData = %x %s %x", tmp, tmp->num, tmp->next);
            printf("\n");
            tmp = tmp->next;
        }
    }
}

struct node *head=NULL;
int main(){
    int n,opt,opt2,posi,posi2;
    char x[100],y[100];
    string src;
    do{
    printf("\n1.Create");
    printf("\n2.insert_beg");
    printf("\n3.inset_end");
    printf("\n4.Particular Position insert");
    printf("\n5.Delet");
    printf("\n6.Search");
    printf("\n7.Display");
    printf("\nEnter the choice: ");
    scanf("%d",&opt);
    switch(opt){
    case 1:
        printf("Enter no of nodes: ");
        cin>>n;
        createnode(n);
        break;
    case 2:
        printf("\nEnter the first insert data: ");
        head=(node *)malloc(sizeof(node));
        cin>>head->num;
        insert_beg(head);
       break;
    case 3:
        printf("\nEnter the end insert data: ");
        head=(node *)malloc(sizeof(node));
        cin>>head->num;
        insert_end(head);
        break;
    case 4:
        printf("Enter the psition no: ");
        cin>>posi;
        printf("Enter the data: ");
        head=(node *)malloc(sizeof(node));
        cin>>head->num;
        position(posi, head);
        break;
    case 5:
        printf("\n1.Deleting the first node");
        printf("\n2.Deleting the last node");
        printf("\n3.Deleting the intermediate node");
        printf("\nEnter the choise: ");
        cin>>opt2;
        switch(opt2){
        case 1:
            first_delet();
            break;
        case 2:
            last_delet();
            break;
        case 3:
            printf("Enter the positon no: ");
            cin>>posi2;
            delete_posi(posi2);
            break;
        }
        break;
        case 6:
            printf("Enter the item: ");
            //head=(node *)malloc(sizeof(node));
            //cin>>head->num;
            cin>>src;
            serach(src);
            break;
    case 7:
        display();
        break;
    }

    }while(opt!=0);
}
